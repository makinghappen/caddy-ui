name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  build-and-deploy-web:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.5.3'
          channel: 'stable'
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Analyze project source
        run: flutter analyze
        
      - name: Run tests
        run: flutter test
        
      - name: Build web
        run: flutter build web --release --base-href /caddy-ui/
        
      - name: Deploy to GitHub Pages
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/web
          
  build-desktop:
    if: github.event_name == 'release' && github.event.action == 'created'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            output-name: linux
          - os: windows-latest
            output-name: windows
          - os: macos-latest
            output-name: macos
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.5.3'
          channel: 'stable'
          
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Build Desktop App
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            flutter build linux --release
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            flutter build windows --release
          else
            flutter build macos --release
          fi
        shell: bash
        
      - name: Create Archive
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            cd build/linux/x64/release/bundle
            tar czf ../../../../../caddy-ui-${{ matrix.output-name }}.tar.gz *
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            cd build/windows/x64/runner/Release
            7z a ../../../../../caddy-ui-${{ matrix.output-name }}.zip *
          else
            cd build/macos/Build/Products/Release
            zip -r ../../../../../caddy-ui-${{ matrix.output-name }}.zip Caddy\ UI.app
          fi
        shell: bash
        
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./caddy-ui-${{ matrix.output-name }}.${{ matrix.os == 'windows-latest' && 'zip' || matrix.os == 'macos-latest' && 'zip' || 'tar.gz' }}
          asset_name: caddy-ui-${{ matrix.output-name }}.${{ matrix.os == 'windows-latest' && 'zip' || matrix.os == 'macos-latest' && 'zip' || 'tar.gz' }}
          asset_content_type: application/octet-stream
